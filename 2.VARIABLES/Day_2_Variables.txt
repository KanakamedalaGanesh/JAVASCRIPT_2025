VARIABLE:
Variable is a container for storing values. It is also used for accessing and manipulating data.

TYPES OF VARIABLES IN JAVASCRIPT:
// There are three types of variables in JavaScript:
1. var
2. let
3. const

// var: It is used to declare a variable that can be re-declared and re-assigned. It has function scope or global scope.
// let: It is used to declare a variable that cannot be re-declared but can be re-assigned. It has block scope.
// const: It is used to declare a variable that cannot be re-declared and re-assigned. It has block scope.

// The main difference between var, let, and const is their scope and re-declaration/assignment behavior.
// var is function-scoped or globally-scoped, while let and const are block-scoped.
// let allows re-assignment but not re-declaration, while const does not allow either re-assignment or re-declaration.

EXAMPLES:

// Example of var, let, and const:
var x = 10; // var can be re-declared and re-assigned
let y = 20; // let can be re-assigned but not re-declared
const z = 30; // const cannot be re-declared or re-assigned

// Example of scope:
function example() {
var a = 10; // var is function-scoped
let b = 20; // let is block-scoped
if (true) {
    var c = 30; // var is still accessible here
    let d = 40; // let is not accessible outside this block
}
console.log(a); // 10
console.log(b); // 20
console.log(c); // 30
// console.log(d); // ReferenceError: d is not defined
}

// Example of re-declaration and re-assignment:
var e = 50; // var can be re-declared
var e = 60; // re-declaration is allowed
let f = 70; // let can be re-assigned
f = 80; // re-assignment is allowed
// const g = 90; // const cannot be re-declared or re-assigned
// const g = 100; // SyntaxError: Identifier 'g' has already been declared
// g = 110; // TypeError: Assignment to constant variable
// console.log(e); // 60
// console.log(f); // 80
// console.log(g); // 90


RULES FOR NAMING VARIABLES:
// 1. Variable names can contain letters, digits, underscores (_), and dollar signs ($).
// 2. Variable names must start with a letter, underscore (_), or dollar sign ($).
// 3. Variable names cannot start with a digit.
// 4. Variable names are case-sensitive (e.g., myVar and myvar are different variables).
// 5. Variable names cannot be a reserved keyword (e.g., var, let, const, function, if, else, etc.).
// 6. Variable names should be descriptive and meaningful to improve code readability.
// 7. Variable names should not contain spaces or special characters (except for underscores and dollar signs).
// 8. Variable names should not exceed a reasonable length to maintain clarity and avoid confusion.
// 9. It is a good practice to use camelCase for variable names (e.g., myVariableName) for better readability.
// 10. Avoid using single-letter variable names except for loop counters or temporary variables (e.g., i, j, k).

// Example of valid variable names:
var myVariable = 10; // Valid variable name
let _myVariable = 20; // Valid variable name with underscore
const $myVariable = 30; // Valid variable name with dollar sign
var myVariable1 = 40; // Valid variable name with digit
let myVariableName = 50; // Valid variable name with camelCase

// Example of invalid variable names:
// var 1myVariable = 60; // Invalid variable name (starts with a digit
// let my-variable = 70; // Invalid variable name (contains hyphen)
// const my variable = 80; // Invalid variable name (contains space)
// var function = 90; // Invalid variable name (reserved keyword)
// let if = 100; // Invalid variable name (reserved keyword)
// const my@Variable = 110; // Invalid variable name (contains special character)
// let myVariable! = 120; // Invalid variable name (contains special character)
// let myVariable$ = 130; // Valid variable name with dollar sign
// let myVariable_ = 140; // Valid variable name with underscore
// let myVariable123 = 150; // Valid variable name with digits
// let myVariableName = 160; // Valid variable name with camelCase
// let myVariableName123 = 170; // Valid variable name with camelCase and digits
// let myVariableName_123 = 180; // Valid variable name with camelCase, underscore, and digits.



// Example of variable naming conventions:
let firstName = "John"; // Camel case for multi-word variable names
let last_name = "Doe"; // Snake case for multi-word variable names
let $price = 19.99; // Dollar sign for special variables (e.g., price)
let _tempValue = 25; // Underscore for temporary variables


// Example of using variables:
let age = 30; // Declare a variable using let
console.log("Age:", age); // Output: Age: 30



// Re-assigning a variable
age = 31; // Re-assigning the variable
console.log("Updated Age:", age); // Output: Updated Age: 31



// Example of using const:
const pi = 3.14; // Declare a constant variable using const
console.log("Value of Pi:", pi); // Output: Value of Pi: 3.14
// pi = 3.14159; // Error: Assignment to constant variable (const cannot be re-assigned)



// Example of using var:
var count = 10; // Declare a variable using var
console.log("Count:", count); // Output: Count: 10



// Re-declaring a variable using var
var count = 20; // Re-declaring the variable
console.log("Re-declared Count:", count); // Output: Re-declared Count: 20



// Example of variable scope:
function scopeExample() {
    var localVar = "I am a local variable"; // Local variable
    console.log(localVar); // Output: I am a local variable
}
scopeExample(); // Call the function to see the output
// console.log(localVar); // Error: localVar is not defined (local variable cannot be accessed outside the function)



// Example of block scope with let and const:
{
    let blockScopedVar = "I am block scoped"; // Block-scoped variable
    const blockScopedConst = "I am a block scoped constant"; // Block-scoped constant
    console.log(blockScopedVar); // Output: I am block scoped   
    console.log(blockScopedConst); // Output: I am a block scoped constant
}
// console.log(blockScopedVar); // Error: blockScopedVar is not defined (block scoped variable cannot be accessed outside the block)
// console.log(blockScopedConst); // Error: blockScopedConst is not defined (block scoped constant cannot be accessed outside the block)



// Example of variable hoisting:
console.log(hoistedVar); // Output: undefined (variable is hoisted)
var hoistedVar = "I am hoisted"; // Variable declaration is hoisted, but assignment is not
console.log(hoistedVar); // Output: I am hoisted (after assignment)
// Note: Hoisting applies to `var` declarations. `let` and `const` do not hoist in the same way and will throw a ReferenceError if accessed before declaration.